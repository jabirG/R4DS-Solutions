[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R4DS Solutions",
    "section": "",
    "text": "These are the solutions for R4DS second edition\nR for Data Science (2e) (hadley.nz)"
  },
  {
    "objectID": "chapter-2.html#notes",
    "href": "chapter-2.html#notes",
    "title": "2  Data Visualization",
    "section": "2.1 Notes",
    "text": "2.1 Notes\nalpha aesthetic to add transparency to the filled density curves.\nThis aesthetic takes values between 0 (completely transparent) and 1 (completely opaque)\nis to split your plot into facets, subplots that each display one subset of the data.\nTo facet your plot by a single variable, use facet_wrap(). The first argument of facet_wrap() is a formula2, which you create with ~ followed by a variable name. The variable that you pass to facet_wrap() should be categorical."
  },
  {
    "objectID": "chapter-2.html#questions",
    "href": "chapter-2.html#questions",
    "title": "2  Data Visualization",
    "section": "2.2 Questions",
    "text": "2.2 Questions\nMake a scatterplot of hwy vs. displ using the mpg data frame. Next, map a third, numerical variable to color, then size, then both color and size, then shape. How do these aesthetics behave differently for categorical vs. numerical variables?\nthat second part of the question is really unclear to me\n3.In the scatterplot of hwy vs. displ, what happens if you map a third variable to linewidth?\ni don’t know how to map a third variable??"
  },
  {
    "objectID": "chapter-2.html#exercises",
    "href": "chapter-2.html#exercises",
    "title": "2  Data Visualization",
    "section": "2.3 2.2.5 Exercises",
    "text": "2.3 2.2.5 Exercises\n1.How many rows are in penguins? How many columns?\n344 rows and 8 columns\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.3     ✔ forcats 1.0.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(palmerpenguins)\n\n\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n2.What does the bill_depth_mm variable in the penguins data frame describe? Read the help for ?penguins to find out.\n?penguins\na number denoting bill depth (millimeters)\n3.Make a scatterplot of bill_depth_mm vs. bill_length_mm. Describe the relationship between these two variables.\n\nggplot(data = penguins, aes(x = bill_depth_mm, y = bill_length_mm)) + geom_point()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n#it looks like to me that there can be long narrow beaks and long wide beaks aswell as  shorter beaks that have more depth seems pretty balanced\n\n4.What happens if you make a scatterplot of species vs bill_depth_mm? Why is the plot not useful?\n\nggplot(data = penguins, aes(x = species, y = bill_depth_mm)) + geom_point()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n5.Why does the following give an error and how would you fix it?\nthat code has no x or y mapping\n6.What does the na.rm argument do in geom_point()? What is the default value of the argument? Create a scatterplot where you successfully use this argument set to TRUE.\nthe na.rm argument takes away the warning message. The default is false.\n\nggplot(data = penguins, aes(x = bill_depth_mm, y = bill_length_mm)) + geom_point(na.rm = TRUE)\n\n\n\n\n7.Add the following caption to the plot you made in the previous exercise: “Data come from the palmerpenguins package.” Hint: Take a look at the documentation for labs().\n\nggplot(data = penguins, aes(x = bill_depth_mm, y = bill_length_mm)) + geom_point(na.rm = TRUE) + labs(caption = \"Data come from the palmerpenguins package\")\n\n\n\n\n8.Recreate the following visualization. What aesthetic should bill_depth_mm be mapped to? And should it be mapped at the global level or at the geom level?\njust at the geom level\n\nggplot(data = penguins,aes( x = flipper_length_mm, y = body_mass_g, color = bill_depth_mm)) + geom_point() + geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning: The following aesthetics were dropped during statistical transformation: colour\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n9.Run this code in your head and predict what the output will look like. Then, run the code in R and check your predictions.\nit came out somewhat of what i thought it looked like i didn’t really understand the se = FALSE argument\n\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = island)\n) +\n  geom_point() +\n  geom_smooth(se = FALSE)\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n10.Will these two graphs look different? Why/why not?\nya i think they will look the same because they are doing the same thing one is just writen out\n\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g)\n) +\n  geom_point() +\n  geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\nggplot() +\n  geom_point(\n    data = penguins,\n    mapping = aes(x = flipper_length_mm, y = body_mass_g)\n  ) +\n  geom_smooth(\n    data = penguins,\n    mapping = aes(x = flipper_length_mm, y = body_mass_g)\n  )\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "chapter-2.html#exercises-1",
    "href": "chapter-2.html#exercises-1",
    "title": "2  Data Visualization",
    "section": "2.4 2.4.3 Exercises",
    "text": "2.4 2.4.3 Exercises\n1.Make a bar plot of species of penguins, where you assign species to the y aesthetic. How is this plot different?\nall it does is make the bars horizontal instead of vertical\n\nggplot(penguins, aes(y = species)) + geom_bar()\n\n\n\n\n2.How are the following two plots different? Which aesthetic, color or fill, is more useful for changing the color of bars?\nthe first code outlines the bars while the second code completely shades in the bars,the second is more useful\n\nggplot(penguins, aes(x = species)) +\n  geom_bar(color = \"red\")\n\n\n\n\n\nggplot(penguins, aes(x = species)) +\n  geom_bar(fill = \"red\")\n\n\n\n\n3.What does the bins argument in geom_histogram() do?\nit determines the width or size of the bars\n4.Make a histogram of the carat variable in the diamonds dataset. Experiment with different binwidths. What binwidth reveals the most interesting patterns?\n\nglimpse(diamonds)\n\nRows: 53,940\nColumns: 10\n$ carat   <dbl> 0.23, 0.21, 0.23, 0.29, 0.31, 0.24, 0.24, 0.26, 0.22, 0.23, 0.…\n$ cut     <ord> Ideal, Premium, Good, Premium, Good, Very Good, Very Good, Ver…\n$ color   <ord> E, E, E, I, J, J, I, H, E, H, J, J, F, J, E, E, I, J, J, J, I,…\n$ clarity <ord> SI2, SI1, VS1, VS2, SI2, VVS2, VVS1, SI1, VS2, VS1, SI1, VS1, …\n$ depth   <dbl> 61.5, 59.8, 56.9, 62.4, 63.3, 62.8, 62.3, 61.9, 65.1, 59.4, 64…\n$ table   <dbl> 55, 61, 65, 58, 58, 57, 57, 55, 61, 61, 55, 56, 61, 54, 62, 58…\n$ price   <int> 326, 326, 327, 334, 335, 336, 336, 337, 337, 338, 339, 340, 34…\n$ x       <dbl> 3.95, 3.89, 4.05, 4.20, 4.34, 3.94, 3.95, 4.07, 3.87, 4.00, 4.…\n$ y       <dbl> 3.98, 3.84, 4.07, 4.23, 4.35, 3.96, 3.98, 4.11, 3.78, 4.05, 4.…\n$ z       <dbl> 2.43, 2.31, 2.31, 2.63, 2.75, 2.48, 2.47, 2.53, 2.49, 2.39, 2.…\n\nggplot(diamonds,aes(x = carat)) + geom_histogram(binwidth = .10)\n\n\n\n\ni think .10 binwidth shows the most results"
  },
  {
    "objectID": "chapter-2.html#exercises-2",
    "href": "chapter-2.html#exercises-2",
    "title": "2  Data Visualization",
    "section": "2.5 2.5.5 Exercises",
    "text": "2.5 2.5.5 Exercises\n\nWhich variables in mpg are categorical? Which variables are continuous? (Hint: type ?mpg to read the documentation for the dataset). How can you see this information when you run mpg?\n\n6 categorical,displ is continous,glimpse(mpg) or type mpg or the help function ?mpg\n\nglimpse(mpg)\n\nRows: 234\nColumns: 11\n$ manufacturer <chr> \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"…\n$ model        <chr> \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4 quattro\", \"…\n$ displ        <dbl> 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.…\n$ year         <int> 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200…\n$ cyl          <int> 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, …\n$ trans        <chr> \"auto(l5)\", \"manual(m5)\", \"manual(m6)\", \"auto(av)\", \"auto…\n$ drv          <chr> \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"4\", \"4\", \"4\", \"4\", \"4…\n$ cty          <int> 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1…\n$ hwy          <int> 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2…\n$ fl           <chr> \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p…\n$ class        <chr> \"compact\", \"compact\", \"compact\", \"compact\", \"compact\", \"c…\n\nmpg\n\n# A tibble: 234 × 11\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   <chr>        <chr>      <dbl> <int> <int> <chr> <chr> <int> <int> <chr> <chr>\n 1 audi         a4           1.8  1999     4 auto… f        18    29 p     comp…\n 2 audi         a4           1.8  1999     4 manu… f        21    29 p     comp…\n 3 audi         a4           2    2008     4 manu… f        20    31 p     comp…\n 4 audi         a4           2    2008     4 auto… f        21    30 p     comp…\n 5 audi         a4           2.8  1999     6 auto… f        16    26 p     comp…\n 6 audi         a4           2.8  1999     6 manu… f        18    26 p     comp…\n 7 audi         a4           3.1  2008     6 auto… f        18    27 p     comp…\n 8 audi         a4 quattro   1.8  1999     4 manu… 4        18    26 p     comp…\n 9 audi         a4 quattro   1.8  1999     4 auto… 4        16    25 p     comp…\n10 audi         a4 quattro   2    2008     4 manu… 4        20    28 p     comp…\n# … with 224 more rows\n\n\n\nMake a scatterplot of hwy vs. displ using the mpg data frame. Next, map a third, numerical variable to color, then size, then both color and size, then shape. How do these aesthetics behave differently for categorical vs. numerical variables?\n\n\nggplot(mpg,aes(x = hwy, y = displ,color = cty)) + geom_point()\n\n\n\n\n\nggplot(mpg,aes(x = hwy, y = displ,size = cty)) + geom_point()\n\n\n\n\n\nggplot(mpg,aes(x = hwy, y = displ,size = cty,color = cty)) + geom_point()\n\n\n\n\n3.In the scatterplot of hwy vs. displ, what happens if you map a third variable to linewidth?\nthere is no line to alter\n\nggplot(mpg,aes(x = hwy, y = displ,linewidth = cty)) + geom_point()\n\n\n\n\n4.what happens if you map the same variable to multiple aesthetics?\njust shows the variable by its self,doesn’t really show much information\n\nggplot(mpg,aes(x = hwy, y = hwy, color  = hwy)) + geom_point()\n\n\n\n\n5.Make a scatterplot of bill_depth_mm vs. bill_length_mm and color the points by species. What does adding coloring by species reveal about the relationship between these two variables?\nthat adelies tend to have more depth in their bills while gentoo are longer all while chinstrap are both long and have depth\n\nggplot(penguins,aes(x = bill_depth_mm, y = bill_length_mm,color = species)) + geom_point()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n6.Why does the following yield two separate legends? How would you fix it to combine the two legends?\nbecause the labs argument makes another legend, i just took that argument out\n\nggplot(\n  data = penguins,\n  mapping = aes(\n    x = bill_length_mm, y = bill_depth_mm, \n    color = species, shape = species\n  )\n) +\n  geom_point() \n\nWarning: Removed 2 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "chapter-2.html#exercises-3",
    "href": "chapter-2.html#exercises-3",
    "title": "2  Data Visualization",
    "section": "2.6 2.6.1 Exercises",
    "text": "2.6 2.6.1 Exercises\n1.Run the following lines of code. Which of the two plots is saved as mpg-plot.png? Why?\nthe second line of code is saved,because ggsave saves the last plot you made\n\nggplot(mpg, aes(x = class)) +\n  geom_bar()\n\n\n\nggplot(mpg, aes(x = cty, y = hwy)) +\n  geom_point()\n\n\n\nggsave(\"mpg-plot.png\")\n\nSaving 7 x 5 in image\n\n\n2.What do you need to change in the code above to save the plot as a PDF instead of a PNG?\nyou just have to change the png to pdf in the last ggsave code chunk"
  },
  {
    "objectID": "chapter-3.html#notes",
    "href": "chapter-3.html#notes",
    "title": "3  Workflow Basics",
    "section": "3.1 Notes",
    "text": "3.1 Notes"
  },
  {
    "objectID": "chapter-3.html#questions",
    "href": "chapter-3.html#questions",
    "title": "3  Workflow Basics",
    "section": "3.2 Questions",
    "text": "3.2 Questions"
  },
  {
    "objectID": "chapter-3.html#exercises",
    "href": "chapter-3.html#exercises",
    "title": "3  Workflow Basics",
    "section": "3.3 3.5 Exercises",
    "text": "3.3 3.5 Exercises\n1.why does this code not work?\nbecause in my_variable theres a 1 instead of an i in variable\n2.tweak each of th R commands so they run properly\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.3     ✔ forcats 1.0.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy))\n\n\n\n\n3.Press Alt + Shift + K. What happens? How can you get to the same place using the menus?\ni have no idea pretty cool tho\n4.Let’s revisit an exercise from the Section 2.6. Run the following lines of code. Which of the two plots is saved as mpg-plot.png? Why?\nthe my_bar_plot is saved because thats what was specified\n\nmy_bar_plot <- ggplot(mpg, aes(x = class)) +\n  geom_bar()\nmy_scatter_plot <- ggplot(mpg, aes(x = cty, y = hwy)) +\n  geom_point()\nggsave(filename = \"mpg-plot.png\", plot = my_bar_plot)\n\nSaving 7 x 5 in image"
  },
  {
    "objectID": "chapter-4.html#notes",
    "href": "chapter-4.html#notes",
    "title": "4  Data Transformation",
    "section": "4.1 Notes",
    "text": "4.1 Notes"
  },
  {
    "objectID": "chapter-4.html#questions",
    "href": "chapter-4.html#questions",
    "title": "4  Data Transformation",
    "section": "4.2 Questions",
    "text": "4.2 Questions\nFor question 3 I don’t really know where to start with calculations\n\nlibrary(nycflights13)\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.3     ✔ forcats 1.0.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n#> ── Attaching packages ──────────────────────────────────── tidyverse 1.3.2 ──\n#> ✔ ggplot2 3.4.0           ✔ purrr   1.0.1.9000 \n#> ✔ tibble  3.1.8           ✔ dplyr   1.0.99.9000\n#> ✔ tidyr   1.2.1.9001      ✔ stringr 1.5.0      \n#> ✔ readr   2.1.3           ✔ forcats 0.5.2      \n#> ── Conflicts ─────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()"
  },
  {
    "objectID": "chapter-4.html#exercises",
    "href": "chapter-4.html#exercises",
    "title": "4  Data Transformation",
    "section": "4.3 4.2.5 Exercises",
    "text": "4.3 4.2.5 Exercises\n1.find all flights that\na.had a arrival delay of two hours or more\n\nfilter(flights,arr_delay >= 2) %>% arrange(desc(arr_delay))\n\n# A tibble: 127,929 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     9      641        900    1301    1242    1530    1272 HA     \n 2  2013     6    15     1432       1935    1137    1607    2120    1127 MQ     \n 3  2013     1    10     1121       1635    1126    1239    1810    1109 MQ     \n 4  2013     9    20     1139       1845    1014    1457    2210    1007 AA     \n 5  2013     7    22      845       1600    1005    1044    1815     989 MQ     \n 6  2013     4    10     1100       1900     960    1342    2211     931 DL     \n 7  2013     3    17     2321        810     911     135    1020     915 DL     \n 8  2013     7    22     2257        759     898     121    1026     895 DL     \n 9  2013    12     5      756       1700     896    1058    2020     878 AA     \n10  2013     5     3     1133       2055     878    1250    2215     875 MQ     \n# … with 127,919 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n\n\nb.flew to houston (IAH or HOU)\n\nglimpse(flights)\n\nRows: 336,776\nColumns: 19\n$ year           <int> 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       <int> 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time <int> 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      <dbl> 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       <int> 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time <int> 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      <dbl> 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        <chr> \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         <int> 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        <chr> \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         <chr> \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           <chr> \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       <dbl> 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       <dbl> 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           <dbl> 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         <dbl> 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      <dttm> 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…\n\nview(flights)\n\n\nflights %>% filter(dest %in% c(\"IAH\",\"HOU\"))\n\n# A tibble: 9,313 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      517        515       2     830     819      11 UA     \n 2  2013     1     1      533        529       4     850     830      20 UA     \n 3  2013     1     1      623        627      -4     933     932       1 UA     \n 4  2013     1     1      728        732      -4    1041    1038       3 UA     \n 5  2013     1     1      739        739       0    1104    1038      26 UA     \n 6  2013     1     1      908        908       0    1228    1219       9 UA     \n 7  2013     1     1     1028       1026       2    1350    1339      11 UA     \n 8  2013     1     1     1044       1045      -1    1352    1351       1 UA     \n 9  2013     1     1     1114        900     134    1447    1222     145 UA     \n10  2013     1     1     1205       1200       5    1503    1505      -2 UA     \n# … with 9,303 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n\n\nc.Were operated by United, American, or Delta\n\nflights %>% filter(carrier %in% c(\"UA\",\"DL\",\"AA\"))\n\n# A tibble: 139,504 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      517        515       2     830     819      11 UA     \n 2  2013     1     1      533        529       4     850     830      20 UA     \n 3  2013     1     1      542        540       2     923     850      33 AA     \n 4  2013     1     1      554        600      -6     812     837     -25 DL     \n 5  2013     1     1      554        558      -4     740     728      12 UA     \n 6  2013     1     1      558        600      -2     753     745       8 AA     \n 7  2013     1     1      558        600      -2     924     917       7 UA     \n 8  2013     1     1      558        600      -2     923     937     -14 UA     \n 9  2013     1     1      559        600      -1     941     910      31 AA     \n10  2013     1     1      559        600      -1     854     902      -8 UA     \n# … with 139,494 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n\n\nd.departed in summer(july,august,september)\n\nflights %>% filter(month %in% c(7,8,9))\n\n# A tibble: 86,326 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     7     1        1       2029     212     236    2359     157 B6     \n 2  2013     7     1        2       2359       3     344     344       0 B6     \n 3  2013     7     1       29       2245     104     151       1     110 B6     \n 4  2013     7     1       43       2130     193     322      14     188 B6     \n 5  2013     7     1       44       2150     174     300     100     120 AA     \n 6  2013     7     1       46       2051     235     304    2358     186 B6     \n 7  2013     7     1       48       2001     287     308    2305     243 VX     \n 8  2013     7     1       58       2155     183     335      43     172 B6     \n 9  2013     7     1      100       2146     194     327      30     177 B6     \n10  2013     7     1      100       2245     135     337     135     122 B6     \n# … with 86,316 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n\n\ne.Arrived more than two hours late, but didn’t leave late\n\nflights %>% filter(dep_delay >= 0,arr_delay < -2)\n\n# A tibble: 40,053 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      559        559       0     702     706      -4 B6     \n 2  2013     1     1      600        600       0     851     858      -7 B6     \n 3  2013     1     1      601        600       1     844     850      -6 B6     \n 4  2013     1     1      607        607       0     858     915     -17 UA     \n 5  2013     1     1      615        615       0    1039    1100     -21 B6     \n 6  2013     1     1      615        615       0     833     842      -9 DL     \n 7  2013     1     1      644        636       8     931     940      -9 UA     \n 8  2013     1     1      646        645       1     910     916      -6 UA     \n 9  2013     1     1      646        645       1    1023    1030      -7 UA     \n10  2013     1     1      655        655       0    1021    1030      -9 DL     \n# … with 40,043 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n\n\nf.Were delayed by at least an hour, but made up over 30 minutes in flight\n\nflights %>% filter(dep_delay <= -1,arr_delay > 30)\n\n# A tibble: 3,041 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      559        600      -1     941     910      31 AA     \n 2  2013     1     1      724        730      -6    1111    1040      31 AA     \n 3  2013     1     1      754        755      -1    1103    1030      33 WN     \n 4  2013     1     1      833        835      -2    1134    1102      32 F9     \n 5  2013     1     1     1029       1030      -1    1427    1355      32 AA     \n 6  2013     1     1     1745       1749      -4    1943    1909      34 B6     \n 7  2013     1     2      656        705      -9    1014     940      34 MQ     \n 8  2013     1     2      822        823      -1    1206    1135      31 UA     \n 9  2013     1     2      836        840      -4    1114    1036      38 9E     \n10  2013     1     2      841        845      -4    1134    1024      70 9E     \n# … with 3,031 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n\n\n2.Sort flights to find the flights with longest departure delays. Find the flights that left earliest in the morning.\n\nflights %>% arrange(dep_delay) %>% arrange(time_hour) %>% glimpse()\n\nRows: 336,776\nColumns: 19\n$ year           <int> 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       <int> 554, 544, 559, 517, 542, 533, 602, 622, 637, 554, 624, …\n$ sched_dep_time <int> 558, 545, 559, 515, 540, 529, 610, 630, 645, 600, 630, …\n$ dep_delay      <dbl> -4, -1, 0, 2, 2, 4, -8, -8, -8, -6, -6, -6, -5, -4, -4,…\n$ arr_time       <int> 740, 1004, 702, 830, 923, 850, 812, 1017, 930, 812, 909…\n$ sched_arr_time <int> 728, 1022, 706, 819, 850, 830, 820, 1014, 935, 837, 840…\n$ arr_delay      <dbl> 12, -18, -4, 11, 33, 20, -8, 3, -5, -25, 29, 10, 19, -1…\n$ carrier        <chr> \"UA\", \"B6\", \"B6\", \"UA\", \"AA\", \"UA\", \"DL\", \"US\", \"B6\", \"…\n$ flight         <int> 1696, 725, 1806, 1545, 1141, 1714, 1919, 245, 389, 461,…\n$ tailnum        <chr> \"N39463\", \"N804JB\", \"N708JB\", \"N14228\", \"N619AA\", \"N242…\n$ origin         <chr> \"EWR\", \"JFK\", \"JFK\", \"EWR\", \"JFK\", \"LGA\", \"LGA\", \"EWR\",…\n$ dest           <chr> \"ORD\", \"BQN\", \"BOS\", \"IAH\", \"MIA\", \"IAH\", \"MSP\", \"PHX\",…\n$ air_time       <dbl> 150, 183, 44, 227, 160, 227, 170, 342, 144, 116, 190, 1…\n$ distance       <dbl> 719, 1576, 187, 1400, 1089, 1416, 1020, 2133, 950, 762,…\n$ hour           <dbl> 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6…\n$ minute         <dbl> 58, 45, 59, 15, 40, 29, 10, 30, 45, 0, 30, 30, 0, 10, 1…\n$ time_hour      <dttm> 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…\n\n\n3.Sort flights to find the fastest flights (Hint: try sorting by a calculation).\n\nflights %>% arrange(desc(arr_delay))\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     9      641        900    1301    1242    1530    1272 HA     \n 2  2013     6    15     1432       1935    1137    1607    2120    1127 MQ     \n 3  2013     1    10     1121       1635    1126    1239    1810    1109 MQ     \n 4  2013     9    20     1139       1845    1014    1457    2210    1007 AA     \n 5  2013     7    22      845       1600    1005    1044    1815     989 MQ     \n 6  2013     4    10     1100       1900     960    1342    2211     931 DL     \n 7  2013     3    17     2321        810     911     135    1020     915 DL     \n 8  2013     7    22     2257        759     898     121    1026     895 DL     \n 9  2013    12     5      756       1700     896    1058    2020     878 AA     \n10  2013     5     3     1133       2055     878    1250    2215     875 MQ     \n# … with 336,766 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n\n\n4.Was there a flight on every day of 2013?\nyes\n\nflights %>% arrange(desc(day)) %>% arrange(desc(month))\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013    12    31       13       2359      14     439     437       2 B6     \n 2  2013    12    31       18       2359      19     449     444       5 DL     \n 3  2013    12    31       26       2245     101     129    2353      96 B6     \n 4  2013    12    31      459        500      -1     655     651       4 US     \n 5  2013    12    31      514        515      -1     814     812       2 UA     \n 6  2013    12    31      549        551      -2     925     900      25 UA     \n 7  2013    12    31      550        600     -10     725     745     -20 AA     \n 8  2013    12    31      552        600      -8     811     826     -15 EV     \n 9  2013    12    31      553        600      -7     741     754     -13 DL     \n10  2013    12    31      554        550       4    1024    1027      -3 B6     \n# … with 336,766 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n\n\n5.Which flights traveled the farthest distance? Which traveled the least distance?\n\nflights %>% arrange(distance) \n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     7    27       NA        106      NA      NA     245      NA US     \n 2  2013     1     3     2127       2129      -2    2222    2224      -2 EV     \n 3  2013     1     4     1240       1200      40    1333    1306      27 EV     \n 4  2013     1     4     1829       1615     134    1937    1721     136 EV     \n 5  2013     1     4     2128       2129      -1    2218    2224      -6 EV     \n 6  2013     1     5     1155       1200      -5    1241    1306     -25 EV     \n 7  2013     1     6     2125       2129      -4    2224    2224       0 EV     \n 8  2013     1     7     2124       2129      -5    2212    2224     -12 EV     \n 9  2013     1     8     2127       2130      -3    2304    2225      39 EV     \n10  2013     1     9     2126       2129      -3    2217    2224      -7 EV     \n# … with 336,766 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n\n\n\nflights %>% arrange(desc(distance))\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      857        900      -3    1516    1530     -14 HA     \n 2  2013     1     2      909        900       9    1525    1530      -5 HA     \n 3  2013     1     3      914        900      14    1504    1530     -26 HA     \n 4  2013     1     4      900        900       0    1516    1530     -14 HA     \n 5  2013     1     5      858        900      -2    1519    1530     -11 HA     \n 6  2013     1     6     1019        900      79    1558    1530      28 HA     \n 7  2013     1     7     1042        900     102    1620    1530      50 HA     \n 8  2013     1     8      901        900       1    1504    1530     -26 HA     \n 9  2013     1     9      641        900    1301    1242    1530    1272 HA     \n10  2013     1    10      859        900      -1    1449    1530     -41 HA     \n# … with 336,766 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n\n\n6.Does it matter what order you used filter() and arrange() if you’re using both? Why/why not? Think about the results and how much work the functions would have to do.\nI don’t think it matters the two functions would go over each other with no problems either way."
  },
  {
    "objectID": "chapter-4.html#exercises-1",
    "href": "chapter-4.html#exercises-1",
    "title": "4  Data Transformation",
    "section": "4.4 4.3.5 Exercises",
    "text": "4.4 4.3.5 Exercises\n\nCompare air_time with arr_time - dep_time. What do you expect to see? What do you see? What do you need to do to fix it?\nno they don’t match\n\nflights %>% mutate(timearrdep = arr_time - dep_time)\n\n# A tibble: 336,776 × 20\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      517        515       2     830     819      11 UA     \n 2  2013     1     1      533        529       4     850     830      20 UA     \n 3  2013     1     1      542        540       2     923     850      33 AA     \n 4  2013     1     1      544        545      -1    1004    1022     -18 B6     \n 5  2013     1     1      554        600      -6     812     837     -25 DL     \n 6  2013     1     1      554        558      -4     740     728      12 UA     \n 7  2013     1     1      555        600      -5     913     854      19 B6     \n 8  2013     1     1      557        600      -3     709     723     -14 EV     \n 9  2013     1     1      557        600      -3     838     846      -8 B6     \n10  2013     1     1      558        600      -2     753     745       8 AA     \n# … with 336,766 more rows, 10 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, timearrdep <int>, and abbreviated variable\n#   names ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n\n\n\n2.Compare dep_time, sched_dep_time, and dep_delay. How would you expect those three numbers to be related?\nthey show when a plane left when it was supposed to leave and if there was a delay\n3.Brainstorm as many ways as possible to select dep_time, dep_delay, arr_time, and arr_delay from flights\n\nflights %>% select(dep_time, dep_delay, arr_time, arr_delay)\n\n# A tibble: 336,776 × 4\n   dep_time dep_delay arr_time arr_delay\n      <int>     <dbl>    <int>     <dbl>\n 1      517         2      830        11\n 2      533         4      850        20\n 3      542         2      923        33\n 4      544        -1     1004       -18\n 5      554        -6      812       -25\n 6      554        -4      740        12\n 7      555        -5      913        19\n 8      557        -3      709       -14\n 9      557        -3      838        -8\n10      558        -2      753         8\n# … with 336,766 more rows\n\n\n\nselect(flights, dep_time:arr_delay, -sched_dep_time,-sched_arr_time)\n\n# A tibble: 336,776 × 4\n   dep_time dep_delay arr_time arr_delay\n      <int>     <dbl>    <int>     <dbl>\n 1      517         2      830        11\n 2      533         4      850        20\n 3      542         2      923        33\n 4      544        -1     1004       -18\n 5      554        -6      812       -25\n 6      554        -4      740        12\n 7      555        -5      913        19\n 8      557        -3      709       -14\n 9      557        -3      838        -8\n10      558        -2      753         8\n# … with 336,766 more rows\n\n\n4.What happens if you include the name of a variable multiple times in a select() call?\nit just prints out the same outcome as if i only used one\n\nflights %>% select(dep_time, dep_time)\n\n# A tibble: 336,776 × 1\n   dep_time\n      <int>\n 1      517\n 2      533\n 3      542\n 4      544\n 5      554\n 6      554\n 7      555\n 8      557\n 9      557\n10      558\n# … with 336,766 more rows\n\n\n5.What does the any_of() function do? Why might it be helpful in conjunction with this vector?\n\nvariables <- c(\"year\", \"month\", \"day\", \"dep_delay\", \"arr_delay\")\n\n6.\nno it doesn’t surprise me.it looks like case doesn’t matter.i can change time to dep\n\nselect(flights, contains(\"TIME\"))\n\n# A tibble: 336,776 × 6\n   dep_time sched_dep_time arr_time sched_arr_time air_time time_hour          \n      <int>          <int>    <int>          <int>    <dbl> <dttm>             \n 1      517            515      830            819      227 2013-01-01 05:00:00\n 2      533            529      850            830      227 2013-01-01 05:00:00\n 3      542            540      923            850      160 2013-01-01 05:00:00\n 4      544            545     1004           1022      183 2013-01-01 05:00:00\n 5      554            600      812            837      116 2013-01-01 06:00:00\n 6      554            558      740            728      150 2013-01-01 05:00:00\n 7      555            600      913            854      158 2013-01-01 06:00:00\n 8      557            600      709            723       53 2013-01-01 06:00:00\n 9      557            600      838            846      140 2013-01-01 06:00:00\n10      558            600      753            745      138 2013-01-01 06:00:00\n# … with 336,766 more rows"
  },
  {
    "objectID": "chapter-4.html#exercises-2",
    "href": "chapter-4.html#exercises-2",
    "title": "4  Data Transformation",
    "section": "4.5 4.4.6 Exercises",
    "text": "4.5 4.4.6 Exercises\n\nWhich carrier has the worst delays? Challenge: can you disentangle the effects of bad airports vs. bad carriers? Why/why not? (Hint: think about flights |> group_by(carrier, dest) |> summarize(n()))\n\nit looks like 9e has the worst delays\n\nflights |> group_by(carrier, dep_delay) |> summarize(n())\n\n`summarise()` has grouped output by 'carrier'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 4,032 × 3\n# Groups:   carrier [16]\n   carrier dep_delay `n()`\n   <chr>       <dbl> <int>\n 1 9E            -24     2\n 2 9E            -23     1\n 3 9E            -22     1\n 4 9E            -21     1\n 5 9E            -20     2\n 6 9E            -19     6\n 7 9E            -18    11\n 8 9E            -17    12\n 9 9E            -16    18\n10 9E            -15    40\n# … with 4,022 more rows\n\nflights %>% arrange(desc(dep_delay))\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     9      641        900    1301    1242    1530    1272 HA     \n 2  2013     6    15     1432       1935    1137    1607    2120    1127 MQ     \n 3  2013     1    10     1121       1635    1126    1239    1810    1109 MQ     \n 4  2013     9    20     1139       1845    1014    1457    2210    1007 AA     \n 5  2013     7    22      845       1600    1005    1044    1815     989 MQ     \n 6  2013     4    10     1100       1900     960    1342    2211     931 DL     \n 7  2013     3    17     2321        810     911     135    1020     915 DL     \n 8  2013     6    27      959       1900     899    1236    2226     850 DL     \n 9  2013     7    22     2257        759     898     121    1026     895 DL     \n10  2013    12     5      756       1700     896    1058    2020     878 AA     \n# … with 336,766 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n\n\n2.Find the most delayed flight to each destination.\n\nflights %>% group_by(dep_delay,dest) %>% summarise(n())\n\n`summarise()` has grouped output by 'dep_delay'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 16,426 × 3\n# Groups:   dep_delay [528]\n   dep_delay dest  `n()`\n       <dbl> <chr> <int>\n 1       -43 DEN       1\n 2       -33 MSY       1\n 3       -32 IAD       1\n 4       -30 TPA       1\n 5       -27 DEN       1\n 6       -26 DTW       1\n 7       -25 DTW       1\n 8       -25 TYS       1\n 9       -24 BUF       1\n10       -24 FLL       1\n# … with 16,416 more rows\n\n\n3.How do delays vary over the course of the day. Illustrate your answer with a plot.\n\nggplot(flights,aes(x = time_hour,y = dep_delay)) + geom_smooth()\n\n4.What happens if you supply a negative n to slice_min() and friends?\nyou get a error\n\nflights %>% slice_min(-n)\n\nError in `slice_min()`:\n! Can't compute indices.\nCaused by error in `-n`:\n! invalid argument to unary operator\n\n\n5.Explain what count() does in terms of the dplyr verbs you just learn. What does the sort argument to count() do?\ncount,counts the number of things in each specific group,will show the largest group at the top\n6.Suppose we have the following tiny data frame\n\ndf <- tibble(\n  x = 1:5,\n  y = c(\"a\", \"b\", \"a\", \"a\", \"b\"),\n  z = c(\"K\", \"K\", \"L\", \"L\", \"K\")\n)\n\na.What does the following code do? Run it, analyze the result, and describe what group_by() does.\nit would group by y\n\ndf |>\n  group_by(y)\n\n# A tibble: 5 × 3\n# Groups:   y [2]\n      x y     z    \n  <int> <chr> <chr>\n1     1 a     K    \n2     2 b     K    \n3     3 a     L    \n4     4 a     L    \n5     5 b     K    \n\n\nb.What does the following code do? Run it, analyze the result, and describe what arrange() does. Also comment on how it’s different from the group_by() in part (a)?\nwhat arrange did here is arranged y in alphabetical order in this case\n\ndf |>\n  arrange(y)\n\n# A tibble: 5 × 3\n      x y     z    \n  <int> <chr> <chr>\n1     1 a     K    \n2     3 a     L    \n3     4 a     L    \n4     2 b     K    \n5     5 b     K    \n\n\nc.What does the following code do? Run it, analyze the result, and describe what the pipeline does\nthe pipeline tells the code what to do next, it groups by y then finds the average of x\n\ndf |>\n  group_by(y) |>\n  summarize(mean_x = mean(x))\n\n# A tibble: 2 × 2\n  y     mean_x\n  <chr>  <dbl>\n1 a       2.67\n2 b       3.5 \n\n\nd.What does the following code do? Run it, analyze the result, and describe what the pipeline does. Then, comment on what the message says.\nthe code groups by y and z then averages x,then it shows theres a average of 1 k for a y,an average of 3.5 L’s for the second a in y and an average of 3.5 k’s for b\n\ndf |>\n  group_by(y, z) |>\n  summarize(mean_x = mean(x))\n\n`summarise()` has grouped output by 'y'. You can override using the `.groups`\nargument.\n\n\n# A tibble: 3 × 3\n# Groups:   y [2]\n  y     z     mean_x\n  <chr> <chr>  <dbl>\n1 a     K        1  \n2 a     L        3.5\n3 b     K        3.5\n\n\ne.What does the following code do? Run it, analyze the result, and describe what the pipeline does. How is the output different from the one in part (d)\nthis completely gets rid of the group by part the thing that does this is .groups = “drop”\n\ndf |>\n  group_by(y, z) |>\n  summarize(mean_x = mean(x), .groups = \"drop\")\n\n# A tibble: 3 × 3\n  y     z     mean_x\n  <chr> <chr>  <dbl>\n1 a     K        1  \n2 a     L        3.5\n3 b     K        3.5\n\n\nf.What do the following pipelines do? Run both, analyze the results, and describe what each pipeline does. How are the outputs of the two pipelines different?\nthese codes do the same thing the only difference is that the first code shows the information in a more efficient way due to summarize\n\ndf |>\n  group_by(y, z) |>\n  summarize(mean_x = mean(x))\n\n`summarise()` has grouped output by 'y'. You can override using the `.groups`\nargument.\n\n\n# A tibble: 3 × 3\n# Groups:   y [2]\n  y     z     mean_x\n  <chr> <chr>  <dbl>\n1 a     K        1  \n2 a     L        3.5\n3 b     K        3.5\n\ndf |>\n  group_by(y, z) |>\n  mutate(mean_x = mean(x))\n\n# A tibble: 5 × 4\n# Groups:   y, z [3]\n      x y     z     mean_x\n  <int> <chr> <chr>  <dbl>\n1     1 a     K        1  \n2     2 b     K        3.5\n3     3 a     L        3.5\n4     4 a     L        3.5\n5     5 b     K        3.5"
  },
  {
    "objectID": "chapter-5.html#exercises-7.6",
    "href": "chapter-5.html#exercises-7.6",
    "title": "5  Workflow code style",
    "section": "5.1 Exercises 7.6",
    "text": "5.1 Exercises 7.6\n1.Restyle the following pipelines following the guidelines above.\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.3     ✔ forcats 1.0.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(nycflights13)\n\nflights|>filter(dest==\"IAH\")|>group_by(year,month,day)|>summarize(n=n(),delay=mean(arr_delay,na.rm=TRUE))|>filter(n>10)\n\n`summarise()` has grouped output by 'year', 'month'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 365 × 5\n# Groups:   year, month [12]\n    year month   day     n delay\n   <int> <int> <int> <int> <dbl>\n 1  2013     1     1    20 17.8 \n 2  2013     1     2    20  7   \n 3  2013     1     3    19 18.3 \n 4  2013     1     4    20 -3.2 \n 5  2013     1     5    13 20.2 \n 6  2013     1     6    18  9.28\n 7  2013     1     7    19 -7.74\n 8  2013     1     8    19  7.79\n 9  2013     1     9    19 18.1 \n10  2013     1    10    19  6.68\n# … with 355 more rows\n\nflights|>filter(carrier==\"UA\",dest%in%c(\"IAH\",\"HOU\"),sched_dep_time>0900,sched_arr_time<2000)|>group_by(flight)|>summarize(delay=mean(arr_delay,na.rm=TRUE),cancelled=sum(is.na(arr_delay)),n=n())|>filter(n>10)\n\n# A tibble: 74 × 4\n   flight delay cancelled     n\n    <int> <dbl>     <int> <int>\n 1     53 12.5          2    18\n 2    112 14.1          0    14\n 3    205 -1.71         0    14\n 4    235 -5.36         0    14\n 5    255 -9.47         0    15\n 6    268 38.6          1    15\n 7    292  6.57         0    21\n 8    318 10.7          1    20\n 9    337 20.1          2    21\n10    370 17.5          0    11\n# … with 64 more rows\n\n\n\nflights |>\n  \n  filter(dest == \"IAH\") |>\n  group_by(year, month, day) |> \n  summarize(n = n(), delay = mean(arr_delay, na.rm = TRUE)) |>\n  filter(n > 10)\n\n`summarise()` has grouped output by 'year', 'month'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 365 × 5\n# Groups:   year, month [12]\n    year month   day     n delay\n   <int> <int> <int> <int> <dbl>\n 1  2013     1     1    20 17.8 \n 2  2013     1     2    20  7   \n 3  2013     1     3    19 18.3 \n 4  2013     1     4    20 -3.2 \n 5  2013     1     5    13 20.2 \n 6  2013     1     6    18  9.28\n 7  2013     1     7    19 -7.74\n 8  2013     1     8    19  7.79\n 9  2013     1     9    19 18.1 \n10  2013     1    10    19  6.68\n# … with 355 more rows"
  },
  {
    "objectID": "chapter-6.html#notes",
    "href": "chapter-6.html#notes",
    "title": "6  Data Tidying",
    "section": "6.1 Notes",
    "text": "6.1 Notes\nUsing prose, describe how the variables and observations are organised in each of the sample tables."
  },
  {
    "objectID": "chapter-6.html#questions",
    "href": "chapter-6.html#questions",
    "title": "6  Data Tidying",
    "section": "6.2 Questions",
    "text": "6.2 Questions\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.3     ✔ forcats 1.0.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()"
  },
  {
    "objectID": "chapter-6.html#exercises",
    "href": "chapter-6.html#exercises",
    "title": "6  Data Tidying",
    "section": "6.3 6.2.1 Exercises",
    "text": "6.3 6.2.1 Exercises\n1.Using prose, describe how the variables and observations are organised in each of the sample tables\n\n\n\nSketch out the process you’d use to calculate the rate for table2 and table4a + table4b. You will need to perform four operations:\n\nExtract the number of TB cases per country per year.\nExtract the matching population per country per year.\nDivide cases by population, and multiply by 10000.\nStore back in the appropriate place.\n\ntable2 |>\n  pivot_wider(\n    names_from = type,\n    values_from = count\n  ) |> mutate(rate = cases/population * 10000)\n\n# A tibble: 6 × 5\n  country      year  cases population  rate\n  <chr>       <dbl>  <dbl>      <dbl> <dbl>\n1 Afghanistan  1999    745   19987071 0.373\n2 Afghanistan  2000   2666   20595360 1.29 \n3 Brazil       1999  37737  172006362 2.19 \n4 Brazil       2000  80488  174504898 4.61 \n5 China        1999 212258 1272915272 1.67 \n6 China        2000 213766 1280428583 1.67 \n\n\n\n\ntable4a |>\n  pivot_longer(\n    cols = -country,\n    names_to = \"year\",\n    values_to = \"n\"\n  )\n\n# A tibble: 6 × 3\n  country     year       n\n  <chr>       <chr>  <dbl>\n1 Afghanistan 1999     745\n2 Afghanistan 2000    2666\n3 Brazil      1999   37737\n4 Brazil      2000   80488\n5 China       1999  212258\n6 China       2000  213766"
  },
  {
    "objectID": "chapter-7.html#notes",
    "href": "chapter-7.html#notes",
    "title": "7  workflow scripts and projects",
    "section": "7.1 Notes",
    "text": "7.1 Notes"
  },
  {
    "objectID": "chapter-7.html#questions",
    "href": "chapter-7.html#questions",
    "title": "7  workflow scripts and projects",
    "section": "7.2 Questions",
    "text": "7.2 Questions\n1.what tip from twitter did i like?\nif you go to tools-global options - appearance you can change the background"
  },
  {
    "objectID": "chapter-8.html#notes",
    "href": "chapter-8.html#notes",
    "title": "8  importing data",
    "section": "8.1 Notes",
    "text": "8.1 Notes"
  },
  {
    "objectID": "chapter-8.html#questions",
    "href": "chapter-8.html#questions",
    "title": "8  importing data",
    "section": "8.2 Questions",
    "text": "8.2 Questions\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.3     ✔ forcats 1.0.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()"
  },
  {
    "objectID": "chapter-8.html#exercise-8.2.4",
    "href": "chapter-8.html#exercise-8.2.4",
    "title": "8  importing data",
    "section": "8.3 Exercise 8.2.4",
    "text": "8.3 Exercise 8.2.4\n1.What function would you use to read a file where fields were separated with “|”?\nread_delim\n2.Apart from file, skip, and comment, what other arguments do read_csv() and read_tsv() have in common?\nthey have almost all of each others arguments\n3.What are the most important arguments to read_fwf()?\ni don’t know i’ve never used it\n4.Sometimes strings in a CSV file contain commas. To prevent them from causing problems, they need to be surrounded by a quoting character, like \" or '. By default, read_csv() assumes that the quoting character will be \". To read the following text into a data frame, what argument to read_csv() do you need to specify?\ncolnames = false\n5.Identify what is wrong with each of the following inline CSV files. What happens when you run the code?\n\nread_csv(\"a,b\\n1,2,3\\n4,5,6\")\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n\n\nRows: 2 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (1): a\nnum (1): b\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 2 × 2\n      a     b\n  <dbl> <dbl>\n1     1    23\n2     4    56\n\nread_csv(\"a,b,c\\n1,2\\n1,2,3,4\")\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n\n\nRows: 2 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (2): a, b\nnum (1): c\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 2 × 3\n      a     b     c\n  <dbl> <dbl> <dbl>\n1     1     2    NA\n2     1     2    34\n\nread_csv(\"a,b\\n\\1\")\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n\n\nRows: 1 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): a\nlgl (1): b\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 1 × 2\n  a        b    \n  <chr>    <lgl>\n1 \"\\u0001\" NA   \n\nread_csv(\"a,b\\n1,2\\na,b\")\n\nRows: 2 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): a, b\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 2 × 2\n  a     b    \n  <chr> <chr>\n1 1     2    \n2 a     b    \n\nread_csv2(\"a;b\\n1;3\")\n\nℹ Using \"','\" as decimal and \"'.'\" as grouping mark. Use `read_delim()` for more control.\nRows: 1 Columns: 2── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\ndbl (2): a, b\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 1 × 2\n      a     b\n  <dbl> <dbl>\n1     1     3\n\n\n6.Practice referring to non-syntactic names in the following data frame by:\n\nExtracting the variable called 1.\nPlotting a scatterplot of 1 vs. 2.\nCreating a new column called 3, which is 2 divided by 1.\nRenaming the columns to one, two, and three.\n\n\nannoying <- tibble(\n  `1` = 1:10,\n  `2` = `1` * 2 + rnorm(length(`1`))\n)\n\n\nannoying %>% rename(one = `1`,two = `2`) %>%  \n  mutate( three = two/one) %>% ggplot(aes(x = one,y = two)) +\n  geom_point()"
  },
  {
    "objectID": "chapter-9.html#notes",
    "href": "chapter-9.html#notes",
    "title": "9  workflow getting help",
    "section": "9.1 Notes",
    "text": "9.1 Notes\nthis chapter has no exercises"
  },
  {
    "objectID": "chapter-9.html#questions",
    "href": "chapter-9.html#questions",
    "title": "9  workflow getting help",
    "section": "9.2 Questions",
    "text": "9.2 Questions"
  },
  {
    "objectID": "chapter-10.html#notes",
    "href": "chapter-10.html#notes",
    "title": "10  Layers",
    "section": "10.1 Notes",
    "text": "10.1 Notes\nspooky new map code\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.3     ✔ forcats 1.0.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(maps)\n\n\nAttaching package: 'maps'\n\nThe following object is masked from 'package:purrr':\n\n    map\n\n\n\nnz <- map_data(\"nz\")\n\nggplot(nz, aes(x = long, y = lat, group = group)) +\n  geom_polygon(fill = \"white\", color = \"black\")\n\n\n\nggplot(nz, aes(x = long, y = lat, group = group)) +\n  geom_polygon(fill = \"white\", color = \"black\") +\n  coord_quickmap()\n\n\n\n\nbetter for showing proportions in this way\n\nggplot(diamonds, aes(x = cut, fill = clarity)) + \n  geom_bar(position = \"fill\")\n\n\n\n\ncoloring bar chart\n\nggplot(diamonds, aes(x = cut, color = cut)) + \n  geom_bar()\n\n\n\nggplot(diamonds, aes(x = cut, fill = cut)) + \n  geom_bar()\n\n\n\n\nfacet\n\nggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point() + \n  facet_grid(drv ~ cyl)\n\n\n\n\ndifferent types of smooth line plots\n\nggplot(mpg, aes(x = displ, y = hwy, shape = drv)) + \n  geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\nggplot(mpg, aes(x = displ, y = hwy, linetype = drv)) + \n  geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\ngeom ridge\n\nlibrary(ggridges)\n\nggplot(mpg, aes(x = hwy, y = drv, fill = drv, color = drv)) +\n  geom_density_ridges(alpha = 0.5, show.legend = FALSE)\n\nPicking joint bandwidth of 1.28\n\n\n\n\n#> Picking joint bandwidth of 1.28"
  },
  {
    "objectID": "chapter-10.html#questions",
    "href": "chapter-10.html#questions",
    "title": "10  Layers",
    "section": "10.2 Questions",
    "text": "10.2 Questions"
  },
  {
    "objectID": "chapter-10.html#exercise-11.2.1",
    "href": "chapter-10.html#exercise-11.2.1",
    "title": "10  Layers",
    "section": "10.3 Exercise 11.2.1",
    "text": "10.3 Exercise 11.2.1\n\nCreate a scatterplot of hwy vs. displ where the points are pink filled in triangles.\n\n\nlibrary(tidyverse)\n\nggplot(data = mpg,aes(x = hwy, y = displ)) +\n  geom_point(color = \"pink\",shape = 17)\n\n\n\n\n2.Why did the following code not result in a plot with blue points?\n\nggplot(mpg) + \n  geom_point(aes(x = displ, y = hwy,color = \"blue\"))\n\n\n\n\n\n#fixed version\nggplot(data = mpg,aes(x = displ, y = hwy)) +\n  geom_point(color = \"blue\")\n\n\n\n\n3.What does the stroke aesthetic do? What shapes does it work with? (Hint: use ?geom_point)\nstroke controls the size of the stroke for shapes 21-24\n4.What happens if you map an aesthetic to something other than a variable name, like aes(color = displ < 5)? Note, you’ll also need to specify x and y.\nit seperates the displ lower than 5\n\nggplot(mpg,aes(x = hwy, y = displ,color = displ < 5)) + geom_point()"
  },
  {
    "objectID": "chapter-10.html#exercise-11.3.1",
    "href": "chapter-10.html#exercise-11.3.1",
    "title": "10  Layers",
    "section": "10.4 Exercise 11.3.1",
    "text": "10.4 Exercise 11.3.1\n\nWhat geom would you use to draw a line chart? A boxplot? A histogram? An area chart?\n\ngeom_smooth,geom_boxplot,geom_histogram,geom_area\n2.Earlier in this chapter we used show.legend without explaining it:\\\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_smooth(aes(color = drv), show.legend = FALSE)\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\nWhat does show.legend = FALSE do here? What happens if you remove it? Why do you think we used it earlier?\nit takes away the legend on the side,if you remove it,it will show the legend\n3.What does the se argument to geom_smooth() do?\nit displays the confidence interval around the line on the chart\n4.Recreate the R code necessary to generate the following graphs. Note that wherever a categorical variable is used in the plot, it’s drv.\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point() +\n  geom_smooth(se = FALSE)\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point() + \n  geom_smooth(se = FALSE,aes(shape = drv))\n\nWarning in geom_smooth(se = FALSE, aes(shape = drv)): Ignoring unknown\naesthetics: shape\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point(aes(color = drv)) + \n  geom_smooth(se = FALSE,aes(shape = drv,color = drv))\n\nWarning in geom_smooth(se = FALSE, aes(shape = drv, color = drv)): Ignoring\nunknown aesthetics: shape\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point(aes(color = drv)) + \n  geom_smooth(se = FALSE,aes(shape = drv,linetype = drv))\n\nWarning in geom_smooth(se = FALSE, aes(shape = drv, linetype = drv)): Ignoring\nunknown aesthetics: shape\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point(aes(shape = \"circle open\", color = drv))"
  },
  {
    "objectID": "chapter-10.html#exercise-11.4.1",
    "href": "chapter-10.html#exercise-11.4.1",
    "title": "10  Layers",
    "section": "10.5 Exercise 11.4.1",
    "text": "10.5 Exercise 11.4.1\n1.What happens if you facet on a continuous variable?\nthis is what google says:\nYou’ll get one row or column for each unique value of the variable\n2.What do the empty cells in plot with facet_grid(drv ~ cyl) mean? How do they relate to this plot?\nmeans there was no data in that area i assume\n\nggplot(mpg) + \n  geom_point(aes(x = drv, y = cyl)) +\n  facet_grid(drv ~ cyl)\n\n\n\n\n3.What plots does the following code make? What does . do?\nIt means “everything”, another way of saying don’t facet across columns because we’re not diving up the data by a variable’s levels across columns. And in the second case it’s across rows\n\nggplot(mpg) + \n  geom_point(aes(x = displ, y = hwy)) +\n  facet_grid(drv ~ .)\n\n\n\nggplot(mpg) + \n  geom_point(aes(x = displ, y = hwy)) +\n  facet_grid(. ~ cyl)\n\n\n\n\n4.Take the first faceted plot in this section:\n\nggplot(mpg) + \n  geom_point(aes(x = displ, y = hwy)) + \n  facet_wrap(~ class, nrow = 2)\n\n\n\n\nWhat are the advantages to using faceting instead of the color aesthetic? What are the disadvantages? How might the balance change if you had a larger dataset?\nthe advantages of faceting is seeing each subgroup apart from each other to see more clearly. the disadvantages are not seeing the data overlap with each other.im pretty sure they’ll just be more points.\n5.Read ?facet_wrap. What does nrow do? What does ncol do? What other options control the layout of the individual panels? Why doesn’t facet_grid() have nrow and ncol argument\nyou can choose the number of rows and cols with nrow and ncol.like strink and as.table etc.\nfor the same reason facet wrap does\n6.Which of the following two plots makes it easier to compare engine size (displ) across cars with different drive trains? What does this say about when to place a faceting variable across rows or columns?\nthe second plot makes it easier. use which ever suits best\n\nggplot(mpg) + \n  geom_point(aes(x = displ, y = hwy)) + \n  facet_grid(drv ~ .)\n\n\n\nggplot(mpg) + \n  geom_point(aes(x = displ, y = hwy)) + \n  facet_grid(. ~ drv)\n\n\n\n\n7.Recreate this plot using facet_wrap() instead of facet_grid(). How do the positions of the facet labels change?\nfacet grid chose to use rows instead of columns in the first code\n\nggplot(mpg) + \n  geom_point(aes(x = displ, y = hwy)) +\n  facet_grid(drv ~ .)\n\n\n\n\n\nggplot(mpg) + \n  geom_point(aes(x = displ, y = hwy)) +\n  facet_wrap( ~ drv)"
  },
  {
    "objectID": "chapter-10.html#exercise-11.5.1",
    "href": "chapter-10.html#exercise-11.5.1",
    "title": "10  Layers",
    "section": "10.6 Exercise 11.5.1",
    "text": "10.6 Exercise 11.5.1\n1.What is the default geom associated with stat_summary()? How could you rewrite the previous plot to use that geom function instead of the stat function?\ni believe its geom_point\n2.What does geom_col() do? How is it different from geom_bar()?\ntype ?geom_col tells you in the description\n3.Most geoms and stats come in pairs that are almost always used in concert. Read through the documentation and make a list of all the pairs. What do they have in common?\nalot of the geoms use stat = identity and some use bin and count\n4.What variables does stat_smooth() compute? What parameters control its behavior?\nstat_smooth () provides the following variables, some of which depend on the orientation: y or x predicted value\n5.In our proportion bar chart, we need to set group = 1. Why? In other words, what is the problem with these two graphs?\nthese graphs don’t show any information\n\nggplot(diamonds, aes(x = cut, y = after_stat(prop))) + \n  geom_bar()\n\n\n\nggplot(diamonds, aes(x = cut, fill = color, y = after_stat(prop))) + \n  geom_bar()\n\n\n\n\ni think i fixed them\n\nggplot(diamonds, aes(x = cut)) + \n  geom_bar()\n\n\n\nggplot(diamonds, aes(x = cut, fill = color)) + \n  geom_bar()"
  },
  {
    "objectID": "chapter-10.html#exercise-11.6.1",
    "href": "chapter-10.html#exercise-11.6.1",
    "title": "10  Layers",
    "section": "10.7 Exercise 11.6.1",
    "text": "10.7 Exercise 11.6.1\n1.What is the problem with this plot? How could you improve it?\n\nggplot(mpg, aes(x = cty, y = hwy)) + \n  geom_point()\n\n\n\n\n2.What parameters to geom_jitter() control the amount of jittering?\nTo adjust the amount of jittering along the x and y axes, one can explicitly set the position adjustment: geom_jitter (data= d, mapping = aes (x =system, y = runtime), size =1, position = position_jitter (width =0.3, height =0))\n3.Compare and contrast geom_jitter() with geom_count().\nthey both makes it easier to map out discrete data and helps show overlapping data for plots\n4.What’s the default position adjustment for geom_boxplot()? Create a visualization of the mpg dataset that demonstrates it.\nthe default is dodge2\n\nggplot(data = mpg, aes(x = cty, y = displ)) +\n  geom_boxplot(position = \"dodge2\")\n\nWarning: Continuous x aesthetic\nℹ did you forget `aes(group = ...)`?"
  },
  {
    "objectID": "chapter-10.html#exercise-11.7.1",
    "href": "chapter-10.html#exercise-11.7.1",
    "title": "10  Layers",
    "section": "10.8 Exercise 11.7.1",
    "text": "10.8 Exercise 11.7.1\n1.Turn a stacked bar chart into a pie chart using coord_polar().\n\nggplot(diamonds, aes(x = cut, fill = clarity)) + \n  geom_bar(position = \"fill\")  + coord_polar()\n\n\n\n\n2.What’s the difference between coord_quickmap() and coord_map()?\ncoord quick map sets the aspect ratio correctly for maps while coord map projects a portion of the earth onto a 2d plane so i think coord quick map is like for exact coordinates and coord map is for a bigger representation i think\n3.What does the plot below tell you about the relationship between city and highway mpg? Why is coord_fixed() important? What does geom_abline() do?\n\nggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +\n  geom_point() + \n  geom_abline() +\n  coord_fixed()\n\n\n\n\nthis plot shows the more city miles per gallon the higher the highway mile per gallon goes,i believe coord fixed makes the plot like taller to show the information better,geom abline shows the same information only on a solid line"
  },
  {
    "objectID": "chapter-11.html#notes",
    "href": "chapter-11.html#notes",
    "title": "11  Exploratory data analysis",
    "section": "11.1 Notes",
    "text": "11.1 Notes\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.3     ✔ forcats 1.0.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(ggbeeswarm)\n\nScatterplots become less useful as the size of your dataset grows, because points begin to overplot, and pile up into areas of uniform black (as above). You’ve already seen one way to fix the problem: using the alpha aesthetic to add transparency\nBut using transparency can be challenging for very large datasets. Another solution is to use bin. Previously you used geom_histogram() and geom_freqpoly() to bin in one dimension. Now you’ll learn how to use geom_bin2d() and geom_hex() to bin in two dimensions.\ngeom_bin2d() and geom_hex() divide the coordinate plane into 2d bins and then use a fill color to display how many points fall into each bin. geom_bin2d() creates rectangular bins. geom_hex() creates hexagonal bins. You will need to install the hexbin package to use geom_hex().\nHeatmaply package and seriation package:\nIf the categorical variables are unordered, you might want to use the seriation package to simultaneously reorder the rows and columns in order to more clearly reveal interesting patterns. For larger plots, you might want to try the heatmaply package, which creates interactive plots.\nAnother approach for exploring the relationship between these variables is computing the counts with dplyr:\n\ndiamonds |> \n  count(color, cut)\n\n# A tibble: 35 × 3\n   color cut           n\n   <ord> <ord>     <int>\n 1 D     Fair        163\n 2 D     Good        662\n 3 D     Very Good  1513\n 4 D     Premium    1603\n 5 D     Ideal      2834\n 6 E     Fair        224\n 7 E     Good        933\n 8 E     Very Good  2400\n 9 E     Premium    2337\n10 E     Ideal      3903\n# … with 25 more rows\n\n#> # A tibble: 35 × 3\n#>   color cut           n\n#>   <ord> <ord>     <int>\n#> 1 D     Fair        163\n#> 2 D     Good        662\n#> 3 D     Very Good  1513\n#> 4 D     Premium    1603\n#> 5 D     Ideal      2834\n#> 6 E     Fair        224\n#> # … with 29 more rows\n\nThen visualize with geom_tile() and the fill aesthetic:\n\ndiamonds |> \n  count(color, cut) |>  \n  ggplot(aes(x = color, y = cut)) +\n  geom_tile(aes(fill = n))\n\n\n\n\nTo visualize the covariation between categorical variables, you’ll need to count the number of observations for each combination of levels of these categorical variables. One way to do that is to rely on the built-in geom_count()\n\nggplot(diamonds, aes(x = cut, y = color)) +\n  geom_count()\n\n\n\n\nInstead, we recommend replacing the unusual values with missing values. The easiest way to do this is to use mutate() to replace the variable with a modified copy. You can use the if_else() function to replace unusual values with NA:\n\ndiamonds |> \n  mutate(y = if_else(y < 3 | y > 20, NA, y))\n\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# … with 53,930 more rows\n\n\ncoord_cartesian() zoom into y\n\nggplot(diamonds, aes(x = y)) + \n  geom_histogram(binwidth = 0.5) +\n  coord_cartesian(ylim = c(0, 50))"
  },
  {
    "objectID": "chapter-11.html#questions",
    "href": "chapter-11.html#questions",
    "title": "11  Exploratory data analysis",
    "section": "11.2 Questions",
    "text": "11.2 Questions"
  },
  {
    "objectID": "chapter-11.html#exercise-12.3.3",
    "href": "chapter-11.html#exercise-12.3.3",
    "title": "11  Exploratory data analysis",
    "section": "11.3 Exercise 12.3.3",
    "text": "11.3 Exercise 12.3.3\n1.Explore the distribution of each of the x, y, and z variables in diamonds. What do you learn? Think about a diamond and how you might decide which dimension is the length, width, and depth.\nlook up help ?diamonds\n\nlibrary(tidyverse)\n\n\nggplot(diamonds, aes(x = x , y = y)) + geom_point()\n\n\n\n\nx is the length, y is the width, z is the depth\n2.Explore the distribution of price. Do you discover anything unusual or surprising? (Hint: Carefully think about the binwidth and make sure you try a wide range of values.)\n\nggplot(diamonds, aes(x = price)) + geom_histogram(binwidth = 2000)\n\n\n\n\n3.How many diamonds are 0.99 carat? How many are 1 carat? What do you think is the cause of the difference?\n\nggplot(diamonds, aes(x = carat)) + geom_histogram(binwidth = .1)\n\n\n\n\n4.Compare and contrast coord_cartesian() vs. xlim() or ylim() when zooming in on a histogram. What happens if you leave binwidth unset? What happens if you try and zoom so only half a bar shows?\n\nggplot(diamonds, aes(x = carat)) + geom_histogram(binwidth = .1) +\n  coord_cartesian(xlim = c(0,50))\n\n\n\nggplot(diamonds, aes(x = carat)) + geom_histogram(binwidth = .1) + \n  coord_cartesian(ylim = c(0,50))\n\n\n\n\nso it looks like when you use the xlim it zooms out but when you use the ylim it zooms in"
  },
  {
    "objectID": "chapter-11.html#exercise-12.4.1",
    "href": "chapter-11.html#exercise-12.4.1",
    "title": "11  Exploratory data analysis",
    "section": "11.4 Exercise 12.4.1",
    "text": "11.4 Exercise 12.4.1\n1.What happens to missing values in a histogram? What happens to missing values in a bar chart? Why is there a difference in how missing values are handled in histograms and bar charts?\nthe missing values are removed with a warning\n2.What does na.rm = TRUE do in mean() and sum()?\nfor mean it determines whether na’s should be removed or not and for sum should na values be removed and certain other values"
  },
  {
    "objectID": "chapter-11.html#exercise-12.5.1.1",
    "href": "chapter-11.html#exercise-12.5.1.1",
    "title": "11  Exploratory data analysis",
    "section": "11.5 Exercise 12.5.1.1",
    "text": "11.5 Exercise 12.5.1.1\n1.Use what you’ve learned to improve the visualization of the departure times of cancelled vs. non-cancelled flights.\n\ncanceled_flights <- nycflights13::flights |> \n  mutate(\n    cancelled = is.na(dep_time),\n    sched_hour = sched_dep_time %/% 100,\n    sched_min = sched_dep_time %% 100,\n    sched_dep_time = sched_hour + (sched_min / 60)\n  ) \n\nggplot(canceled_flights,aes(x = cancelled)) +\n  geom_bar()\n\n\n\n\n2.What variable in the diamonds dataset is most important for predicting the price of a diamond? How is that variable correlated with cut? Why does the combination of those two relationships lead to lower quality diamonds being more expensive?\ni would say maybe clarity or just straight up price, i think because the lower quality diamonds correspond to people buying them who don’t really know about diamonds or don’t care about the quality,theres alot more lower quality diamonds than higher quality\n?diamonds\n3.Instead of exchanging the x and y variables, add coord_flip() as a new layer to the vertical boxplot to create a horizontal one. How does this compare to using exchanging the variables?\nit switching the x and y its alot faster\n\nggplot(mpg, aes(x = hwy, y = fct_reorder(class, hwy, median))) +\n  geom_boxplot() + coord_flip()\n\n\n\n\n4.One problem with boxplots is that they were developed in an era of much smaller datasets and tend to display a prohibitively large number of “outlying values”. One approach to remedy this problem is the letter value plot. Install the lvplot package, and try using geom_lv() to display the distribution of price vs. cut. What do you learn? How do you interpret the plots?\nmy version of r can’t get this\n5.Compare and contrast geom_violin() with a faceted geom_histogram(), or a colored geom_freqpoly(). What are the pros and cons of each method?\ngeom_violin shows a basic understanding of the amount of diamonds while geom_histogram shows the further outliers better and where they are and geom_freqpoly shows the count better\n\nggplot(diamonds,aes(x = price, y = clarity)) +\n  geom_violin()\n\n\n\n\n\nggplot(diamonds,aes(x = price)) +\n  geom_histogram() +\n  facet_wrap(~clarity, ncol = 1, scales = \"free_y\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`\n\n\nggplot(diamonds,aes(x = price, color = clarity)) +\n  geom_freqpoly()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n6.If you have a small dataset, it’s sometimes useful to use geom_jitter() to see the relationship between a continuous and categorical variable. The ggbeeswarm package provides a number of methods similar to geom_jitter(). List them and briefly describe what each one does\nso geom_beeswarm makes it so you have more control over overplotting datasets, while geom_jitter to me seems like just a default that you can use on the go but if you do want more customization ggbeeswarm is better for handling overplotting"
  },
  {
    "objectID": "chapter-11.html#exercise-12.5.2.1",
    "href": "chapter-11.html#exercise-12.5.2.1",
    "title": "11  Exploratory data analysis",
    "section": "11.6 Exercise 12.5.2.1",
    "text": "11.6 Exercise 12.5.2.1\n1.How could you rescale the count dataset above to more clearly show the distribution of cut within color, or color within cut?\ni can use this code from earlier that shows exactly that\n\nggplot(diamonds, aes(x = cut, y = color)) +\n  geom_count()\n\n\n\n\n2.How does the segmented bar chart change if color is mapped to the x aesthetic and cut is mapped to the fill aesthetic? Calculate the counts that fall into each of the segments.\n\ncount(diamonds,color,cut)\n\n# A tibble: 35 × 3\n   color cut           n\n   <ord> <ord>     <int>\n 1 D     Fair        163\n 2 D     Good        662\n 3 D     Very Good  1513\n 4 D     Premium    1603\n 5 D     Ideal      2834\n 6 E     Fair        224\n 7 E     Good        933\n 8 E     Very Good  2400\n 9 E     Premium    2337\n10 E     Ideal      3903\n# … with 25 more rows\n\n ggplot(diamonds,aes( x = color, fill = cut)) +\n  geom_bar(position = \"fill\")\n\n\n\n\n3.Use geom_tile() together with dplyr to explore how average flight delays vary by destination and month of year. What makes the plot difficult to read? How could you improve it?\n\nglimpse(nycflights13::flights)\n\nRows: 336,776\nColumns: 19\n$ year           <int> 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       <int> 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time <int> 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      <dbl> 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       <int> 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time <int> 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      <dbl> 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        <chr> \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         <int> 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        <chr> \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         <chr> \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           <chr> \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       <dbl> 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       <dbl> 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           <dbl> 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         <dbl> 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      <dttm> 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…\n\nnycflights13::flights %>% summarise(dest,month,year) %>% \n  group_by(dest,month)\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\n\n# A tibble: 336,776 × 3\n# Groups:   dest, month [1,113]\n   dest  month  year\n   <chr> <int> <int>\n 1 IAH       1  2013\n 2 IAH       1  2013\n 3 MIA       1  2013\n 4 BQN       1  2013\n 5 ATL       1  2013\n 6 ORD       1  2013\n 7 FLL       1  2013\n 8 IAD       1  2013\n 9 MCO       1  2013\n10 ORD       1  2013\n# … with 336,766 more rows"
  },
  {
    "objectID": "chapter-11.html#exercise-12.5.3.1",
    "href": "chapter-11.html#exercise-12.5.3.1",
    "title": "11  Exploratory data analysis",
    "section": "11.7 Exercise 12.5.3.1",
    "text": "11.7 Exercise 12.5.3.1\n\nsmaller <- diamonds |> \n  filter(carat < 3)\n\n1.Instead of summarizing the conditional distribution with a boxplot, you could use a frequency polygon. What do you need to consider when using cut_width() vs. cut_number()? How does that impact a visualization of the 2d distribution of carat and price?\nif you want to use cut_width know you r datas values,if you use cut_number know your sample size\n\n# visualize price binning by carat, cut_width()\nggplot(smaller, aes(x = price, y = ..density..,)) +\n  geom_freqpoly(aes(color = cut_width(carat, 0.5)))\n\nWarning: The dot-dot notation (`..density..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(density)` instead.\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n# visualize price binning by carat, cut_number(), 10 bins\nggplot(smaller, aes(x = price, y = ..density..,)) +\n  geom_freqpoly(aes(color = cut_number(carat, 10)))\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n2.Visualize the distribution of carat, partitioned by price.\n\nggplot(diamonds, aes(x = price, y = carat)) + \n  geom_boxplot()\n\nWarning: Continuous x aesthetic\nℹ did you forget `aes(group = ...)`?\n\n\n\n\n\n3.How does the price distribution of very large diamonds compare to small diamonds? Is it as you expect, or does it surprise you?\nits not what i expect even the large diamonds are the same price as smaller diamonds\n\nggplot(diamonds,aes(x = carat,y = price)) +\n  geom_point()\n\n\n\n\n4.Combine two of the techniques you’ve learned to visualize the combined distribution of cut, carat, and price.\n\nggplot(diamonds,aes(x = price,color = cut,fill = cut)) +\n  geom_freqpoly()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\nggplot(diamonds,aes(x = carat,color = cut,fill = cut)) +\n  geom_freqpoly()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n5.Two dimensional plots reveal outliers that are not visible in one dimensional plots. For example, some points in the following plot have an unusual combination of x and y values, which makes the points outliers even though their x and y values appear normal when examined separately. Why is a scatterplot a better display than a binned plot for this case?\nbecause this scatterplot shows outliers and binned plots don’t\n\ndiamonds |> \n  filter(x >= 4) |> \n  ggplot(aes(x = x, y = y)) +\n  geom_point() +\n  coord_cartesian(xlim = c(4, 11), ylim = c(4, 11))\n\n\n\n\n\ndiamonds |> \n  filter(x >= 4) |> \nggplot(aes(x = x)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n6.Instead of creating boxes of equal width with cut_width(), we could create boxes that contain roughly equal number of points with cut_number(). What are the advantages and disadvantages of this approach?\nif you want to control the width you use cut_width, if you want to choose the number of bins use cut_number\n\nggplot(smaller, aes(x = carat, y = price)) + \n  geom_boxplot(aes(group = cut_number(carat, 20)))\n\n\n\nsmaller %>% \n  mutate(carat_group = cut_number(carat,20)) %>% \n  count(carat_group)\n\n# A tibble: 20 × 2\n   carat_group     n\n   <fct>       <int>\n 1 [0.2,0.3]    4203\n 2 (0.3,0.31]   2249\n 3 (0.31,0.32]  1840\n 4 (0.32,0.35]  2766\n 5 (0.35,0.4]   3333\n 6 (0.4,0.42]   2088\n 7 (0.42,0.5]   2453\n 8 (0.5,0.53]   2653\n 9 (0.53,0.6]   2863\n10 (0.6,0.7]    2714\n11 (0.7,0.73]   2550\n12 (0.73,0.9]   3890\n13 (0.9,1]      2836\n14 (1,1.01]     2242\n15 (1.01,1.04]  1881\n16 (1.04,1.13]  2692\n17 (1.13,1.23]  2584\n18 (1.23,1.51]  3468\n19 (1.51,1.7]   1950\n20 (1.7,2.8]    2645\n\n\n\nggplot(smaller, aes(x = carat, y = price)) + \n  geom_boxplot(aes(group = cut_width(carat, .1)))\n\n\n\nsmaller %>% \n  mutate(carat_group = cut_width(carat,.1)) %>% \n  count(carat_group)\n\n# A tibble: 27 × 2\n   carat_group     n\n   <fct>       <int>\n 1 [0.15,0.25]   785\n 2 (0.25,0.35] 10273\n 3 (0.35,0.45]  6231\n 4 (0.45,0.55]  5417\n 5 (0.55,0.65]  2328\n 6 (0.65,0.75]  5249\n 7 (0.75,0.85]  1725\n 8 (0.85,0.95]  2656\n 9 (0.95,1.05]  6258\n10 (1.05,1.15]  2687\n# … with 17 more rows"
  },
  {
    "objectID": "chapter-12.html#notes",
    "href": "chapter-12.html#notes",
    "title": "12  communication",
    "section": "12.1 Notes",
    "text": "12.1 Notes\nlabeling plots text\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.3     ✔ forcats 1.0.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlabel_info <- mpg |>\n  group_by(drv) |>\n  arrange(desc(displ)) |>\n  slice_head(n = 1) |>\n  mutate(\n    drive_type = case_when(\n      drv == \"f\" ~ \"front-wheel drive\",\n      drv == \"r\" ~ \"rear-wheel drive\",\n      drv == \"4\" ~ \"4-wheel drive\"\n    )\n  ) |>\n  select(displ, hwy, drv, drive_type)\n\nlabel_info\n\n# A tibble: 3 × 4\n# Groups:   drv [3]\n  displ   hwy drv   drive_type       \n  <dbl> <int> <chr> <chr>            \n1   6.5    17 4     4-wheel drive    \n2   5.3    25 f     front-wheel drive\n3   7      24 r     rear-wheel drive \n\n#> # A tibble: 3 × 4\n#> # Groups:   drv [3]\n#>   displ   hwy drv   drive_type       \n#>   <dbl> <int> <chr> <chr>            \n#> 1   6.5    17 4     4-wheel drive    \n#> 2   5.3    25 f     front-wheel drive\n#> 3   7      24 r     rear-wheel drive\n\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_point(alpha = 0.3) +\n  geom_smooth(se = FALSE) +\n  geom_text(\n    data = label_info, \n    aes(x = displ, y = hwy, label = drive_type),\n    fontface = \"bold\", size = 5, hjust = \"right\", vjust = \"bottom\"\n  ) +\n  theme(legend.position = \"none\")\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n#> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\nnudge and rectangle around label\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_point(alpha = 0.3) +\n  geom_smooth(se = FALSE) +\n  geom_label(\n    data = label_info, \n    aes(x = displ, y = hwy, label = drive_type),\n    fontface = \"bold\", size = 5, hjust = \"right\", alpha = 0.5, nudge_y = 2,\n  ) +\n  theme(legend.position = \"none\")\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n#> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\ngeom_label_repel ggrepel package adjust labels for you\n\nlibrary(ggrepel)\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_point(alpha = 0.3) +\n  geom_smooth(se = FALSE) +\n  geom_label_repel(\n    data = label_info, \n    aes(x = displ, y = hwy, label = drive_type),\n    fontface = \"bold\", size = 5, nudge_y = 2,\n  ) +\n  theme(legend.position = \"none\")\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n#> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\ngreat use of information\n\npotential_outliers <- mpg |>\n  filter(hwy > 40 | (hwy > 20 & displ > 5))\n  \nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point() +\n  geom_text_repel(data = potential_outliers, aes(label = model)) +\n  geom_point(data = potential_outliers, color = \"red\") +\n  geom_point(data = potential_outliers, color = \"red\", size = 3, shape = \"circle open\")\n\n\n\n\ni think you have to create a data frame everytime\n\nlabel_info <- mpg |>\n  summarize(\n    displ = max(displ),\n    hwy = max(hwy),\n    label = \"Increasing engine size is \\nrelated to decreasing fuel economy.\"\n  )\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point() +\n  geom_text(\n    data = label_info, aes(label = label), \n    vjust = \"top\", hjust = \"right\"\n  )"
  },
  {
    "objectID": "chapter-12.html#questions",
    "href": "chapter-12.html#questions",
    "title": "12  communication",
    "section": "12.2 Questions",
    "text": "12.2 Questions"
  },
  {
    "objectID": "chapter-12.html#solutions",
    "href": "chapter-12.html#solutions",
    "title": "12  communication",
    "section": "12.3 Solutions",
    "text": "12.3 Solutions\nprerequisites\n\nlibrary(tidyverse)\nlibrary(ggrepel)\nlibrary(patchwork)"
  },
  {
    "objectID": "chapter-12.html#exercises-12.2.1",
    "href": "chapter-12.html#exercises-12.2.1",
    "title": "12  communication",
    "section": "12.4 Exercises 12.2.1",
    "text": "12.4 Exercises 12.2.1\n\nCreate one plot on the fuel economy data with customized title, subtitle, caption, x, y, and color labels.\n\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point(aes(color = class)) +\n  geom_smooth(se = FALSE) +\n  labs( title = \"insert title here\",\n        subtitle = \"insert subtitle here\",\n        caption = \"insert source here\",\n    x = \"Engine displacement (L)\",\n    y = \"Highway fuel economy (mpg)\",\n    color = \"Car type\"\n  )\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n2.Recreate the following plot using the fuel economy data. Note that both the colors and shapes of points vary by type of drive train\n\nglimpse(mpg)\n\nRows: 234\nColumns: 11\n$ manufacturer <chr> \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"…\n$ model        <chr> \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4 quattro\", \"…\n$ displ        <dbl> 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.…\n$ year         <int> 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200…\n$ cyl          <int> 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, …\n$ trans        <chr> \"auto(l5)\", \"manual(m5)\", \"manual(m6)\", \"auto(av)\", \"auto…\n$ drv          <chr> \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"4\", \"4\", \"4\", \"4\", \"4…\n$ cty          <int> 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1…\n$ hwy          <int> 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2…\n$ fl           <chr> \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p…\n$ class        <chr> \"compact\", \"compact\", \"compact\", \"compact\", \"compact\", \"c…\n\nmpg %>% ggplot(aes(x = cty,y = hwy,color = drv,shape = drv)) +\n  geom_point() +\n  labs(x = \"City MPG\",\n        y = \"Highway MPG\",\n        shape = \"Type of drive train\",\n       color = \"Type of drive train\"\n       )"
  }
]