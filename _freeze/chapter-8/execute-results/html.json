{
  "hash": "05f4f2557f33a9bcb76fd4b1c25cbd88",
  "result": {
    "markdown": "---\ntitle: \"importing data\"\n---\n\n\n## Notes\n\n## Questions\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.3     ✔ forcats 1.0.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n:::\n\n\n## Exercise 8.2.4\n\n1.What function would you use to read a file where fields were separated with \"\\|\"?\n\nread_delim\n\n2.Apart from `file`, `skip`, and `comment`, what other arguments do [`read_csv()`](https://readr.tidyverse.org/reference/read_delim.html) and [`read_tsv()`](https://readr.tidyverse.org/reference/read_delim.html) have in common?\n\nthey have almost all of each others arguments\n\n3.What are the most important arguments to [`read_fwf()`](https://readr.tidyverse.org/reference/read_fwf.html)?\n\ni don't know i've never used it\n\n4.Sometimes strings in a CSV file contain commas. To prevent them from causing problems, they need to be surrounded by a quoting character, like `\"` or `'`. By default, [`read_csv()`](https://readr.tidyverse.org/reference/read_delim.html) assumes that the quoting character will be `\"`. To read the following text into a data frame, what argument to [`read_csv()`](https://readr.tidyverse.org/reference/read_delim.html) do you need to specify?\n\ncolnames = false\n\n5.Identify what is wrong with each of the following inline CSV files. What happens when you run the code?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv(\"a,b\\n1,2,3\\n4,5,6\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 2 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (1): a\nnum (1): b\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n      a     b\n  <dbl> <dbl>\n1     1    23\n2     4    56\n```\n:::\n\n```{.r .cell-code}\nread_csv(\"a,b,c\\n1,2\\n1,2,3,4\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 2 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (2): a, b\nnum (1): c\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n      a     b     c\n  <dbl> <dbl> <dbl>\n1     1     2    NA\n2     1     2    34\n```\n:::\n\n```{.r .cell-code}\nread_csv(\"a,b\\n\\1\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 1 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): a\nlgl (1): b\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  a        b    \n  <chr>    <lgl>\n1 \"\\u0001\" NA   \n```\n:::\n\n```{.r .cell-code}\nread_csv(\"a,b\\n1,2\\na,b\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 2 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): a, b\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  a     b    \n  <chr> <chr>\n1 1     2    \n2 a     b    \n```\n:::\n\n```{.r .cell-code}\nread_csv2(\"a;b\\n1;3\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Using \"','\" as decimal and \"'.'\" as grouping mark. Use `read_delim()` for more control.\nRows: 1 Columns: 2── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\ndbl (2): a, b\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n      a     b\n  <dbl> <dbl>\n1     1     3\n```\n:::\n:::\n\n\n6.Practice referring to non-syntactic names in the following data frame by:\n\na.  Extracting the variable called `1`.\n\nb.  Plotting a scatterplot of `1` vs. `2`.\n\nc.  Creating a new column called `3`, which is `2` divided by `1`.\n\nd.  Renaming the columns to `one`, `two`, and `three`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nannoying <- tibble(\n  `1` = 1:10,\n  `2` = `1` * 2 + rnorm(length(`1`))\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nannoying %>% rename(one = `1`,two = `2`) %>%  \n  mutate( three = two/one) %>% ggplot(aes(x = one,y = two)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](chapter-8_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "chapter-8_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}