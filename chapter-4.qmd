---
title: "Data Transformation"
---

## Notes

## Questions

For question 3 I don't really know where to start with calculations


```{r}
library(nycflights13)
library(tidyverse)
#> ── Attaching packages ──────────────────────────────────── tidyverse 1.3.2 ──
#> ✔ ggplot2 3.4.0           ✔ purrr   1.0.1.9000 
#> ✔ tibble  3.1.8           ✔ dplyr   1.0.99.9000
#> ✔ tidyr   1.2.1.9001      ✔ stringr 1.5.0      
#> ✔ readr   2.1.3           ✔ forcats 0.5.2      
#> ── Conflicts ─────────────────────────────────────── tidyverse_conflicts() ──
#> ✖ dplyr::filter() masks stats::filter()
#> ✖ dplyr::lag()    masks stats::lag()
```

## 4.2.5 Exercises

1.find all flights that

a.had a arrival delay of two hours or more

```{r}


filter(flights,arr_delay >= 2) %>% arrange(desc(arr_delay))
```

b.flew to houston (IAH or HOU)

```{r}

glimpse(flights)
view(flights)
```

```{r}

flights %>% filter(dest %in% c("IAH","HOU"))
```

c.Were operated by United, American, or Delta

```{r}
flights %>% filter(carrier %in% c("UA","DL","AA"))

```

d.departed in summer(july,august,september)

```{r}
flights %>% filter(month %in% c(7,8,9))
```

e.Arrived more than two hours late, but didn't leave late

```{r}
flights %>% filter(dep_delay >= 0,arr_delay < -2)
```

f.Were delayed by at least an hour, but made up over 30 minutes in flight

```{r}
flights %>% filter(dep_delay <= -1,arr_delay > 30)
```

2.Sort `flights` to find the flights with longest departure delays. Find the flights that left earliest in the morning.

```{r}
flights %>% arrange(dep_delay) %>% arrange(time_hour) %>% glimpse()
```

3.Sort `flights` to find the fastest flights (Hint: try sorting by a calculation).

```{r}
flights %>% arrange(desc(arr_delay))
```

4.Was there a flight on every day of 2013?

yes

```{r}
flights %>% arrange(desc(day)) %>% arrange(desc(month))
```

5.Which flights traveled the farthest distance? Which traveled the least distance?

```{r}
flights %>% arrange(distance) 
```

```{r}
flights %>% arrange(desc(distance))
```

6.Does it matter what order you used [`filter()`](https://dplyr.tidyverse.org/reference/filter.html) and [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) if you're using both? Why/why not? Think about the results and how much work the functions would have to do.

I don't think it matters the two functions would go over each other with no problems either way.

## 4.3.5 Exercises

1.  Compare `air_time` with `arr_time - dep_time`. What do you expect to see? What do you see? What do you need to do to fix it?

2.  no they don't match

    ```{r}
    flights %>% mutate(timearrdep = arr_time - dep_time)
    ```

2.Compare `dep_time`, `sched_dep_time`, and `dep_delay`. How would you expect those three numbers to be related?

they show when a plane left when it was supposed to leave and if there was a delay

3.Brainstorm as many ways as possible to select `dep_time`, `dep_delay`, `arr_time`, and `arr_delay` from `flights`

```{r}
flights %>% select(dep_time, dep_delay, arr_time, arr_delay)
```

```{r}
select(flights, dep_time:arr_delay, -sched_dep_time,-sched_arr_time)
```

4.What happens if you include the name of a variable multiple times in a [`select()`](https://dplyr.tidyverse.org/reference/select.html) call?

it just prints out the same outcome as if i only used one

```{r}
flights %>% select(dep_time, dep_time)
```

5.What does the [`any_of()`](https://tidyselect.r-lib.org/reference/all_of.html) function do? Why might it be helpful in conjunction with this vector?

```{r}
variables <- c("year", "month", "day", "dep_delay", "arr_delay")


```

6\.

no it doesn't surprise me.it looks like case doesn't matter.i can change time to dep

```{r}
select(flights, contains("TIME"))
```

## 4.4.6 Exercises

1.  Which carrier has the worst delays? Challenge: can you disentangle the effects of bad airports vs. bad carriers? Why/why not? (Hint: think about `flights |> group_by(carrier, dest) |> summarize(n())`)

it looks like 9e has the worst delays

```{r}
flights |> group_by(carrier, dep_delay) |> summarize(n())
flights %>% arrange(desc(dep_delay))
```

2.Find the most delayed flight to each destination.

```{r}
flights %>% group_by(dep_delay,dest) %>% summarise(n())
```

3.How do delays vary over the course of the day. Illustrate your answer with a plot.

```{r}
#| eval: false
ggplot(flights,aes(x = time_hour,y = dep_delay)) + geom_smooth()
```

4.What happens if you supply a negative `n` to [`slice_min()`](https://dplyr.tidyverse.org/reference/slice.html) and friends?

you get a error

```{r}
#| error: true
flights %>% slice_min(-n)
```

5.Explain what [`count()`](https://dplyr.tidyverse.org/reference/count.html) does in terms of the dplyr verbs you just learn. What does the `sort` argument to [`count()`](https://dplyr.tidyverse.org/reference/count.html) do?

count,counts the number of things in each specific group,will show the largest group at the top

6.Suppose we have the following tiny data frame

```{r}
df <- tibble(
  x = 1:5,
  y = c("a", "b", "a", "a", "b"),
  z = c("K", "K", "L", "L", "K")
)
```

a.What does the following code do? Run it, analyze the result, and describe what [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.html) does.

it would group by y

```{r}
df |>
  group_by(y)
```

b.What does the following code do? Run it, analyze the result, and describe what [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) does. Also comment on how it's different from the [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.html) in part (a)?

what arrange did here is arranged y in alphabetical order in this case

```{r}
df |>
  arrange(y)
```

c.What does the following code do? Run it, analyze the result, and describe what the pipeline does

the pipeline tells the code what to do next, it groups by y then finds the average of x

```{r}
df |>
  group_by(y) |>
  summarize(mean_x = mean(x))
```

d.What does the following code do? Run it, analyze the result, and describe what the pipeline does. Then, comment on what the message says.

the code groups by y and z then averages x,then it shows theres a average of 1 k for a y,an average of 3.5 L's for the second a in y and an average of 3.5 k's for b

```{r}
df |>
  group_by(y, z) |>
  summarize(mean_x = mean(x))
```

e.What does the following code do? Run it, analyze the result, and describe what the pipeline does. How is the output different from the one in part (d)

this completely gets rid of the group by part the thing that does this is .groups = "drop"

```{r}
df |>
  group_by(y, z) |>
  summarize(mean_x = mean(x), .groups = "drop")
```

f.What do the following pipelines do? Run both, analyze the results, and describe what each pipeline does. How are the outputs of the two pipelines different?

these codes do the same thing the only difference is that the first code shows the information in a more efficient way due to summarize

```{r}
df |>
  group_by(y, z) |>
  summarize(mean_x = mean(x))

df |>
  group_by(y, z) |>
  mutate(mean_x = mean(x))
```
